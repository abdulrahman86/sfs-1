/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _NFS3_PROT_H_RPCGEN
#define _NFS3_PROT_H_RPCGEN

#include "arpc.h"


typedef u_longlong_t uint64;
RPC_EXTERN bool_t xdr_uint64(XDR *, uint64 *);

typedef longlong_t int64;
RPC_EXTERN bool_t xdr_int64(XDR *, int64 *);

typedef u_int uint32;
RPC_EXTERN bool_t xdr_uint32(XDR *, uint32 *);

typedef int int32;
RPC_EXTERN bool_t xdr_int32(XDR *, int32 *);
#define NFS3_FHSIZE 64
#define NFS3_COOKIEVERFSIZE 8
#define NFS3_CREATEVERFSIZE 8
#define NFS3_WRITEVERFSIZE 8

typedef char *filename3;
RPC_EXTERN bool_t xdr_filename3(XDR *, filename3 *);

typedef char *nfspath3;
RPC_EXTERN bool_t xdr_nfspath3(XDR *, nfspath3 *);

typedef char cookieverf3[NFS3_COOKIEVERFSIZE];
RPC_EXTERN bool_t xdr_cookieverf3(XDR *, cookieverf3);

typedef char createverf3[NFS3_CREATEVERFSIZE];
RPC_EXTERN bool_t xdr_createverf3(XDR *, createverf3);

typedef char writeverf3[NFS3_WRITEVERFSIZE];
RPC_EXTERN bool_t xdr_writeverf3(XDR *, writeverf3);

enum nfsstat3 {
	NFS3_OK = 0,
	NFS3ERR_PERM = 1,
	NFS3ERR_NOENT = 2,
	NFS3ERR_IO = 5,
	NFS3ERR_NXIO = 6,
	NFS3ERR_ACCES = 13,
	NFS3ERR_EXIST = 17,
	NFS3ERR_XDEV = 18,
	NFS3ERR_NODEV = 19,
	NFS3ERR_NOTDIR = 20,
	NFS3ERR_ISDIR = 21,
	NFS3ERR_INVAL = 22,
	NFS3ERR_FBIG = 27,
	NFS3ERR_NOSPC = 28,
	NFS3ERR_ROFS = 30,
	NFS3ERR_MLINK = 31,
	NFS3ERR_NAMETOOLONG = 63,
	NFS3ERR_NOTEMPTY = 66,
	NFS3ERR_DQUOT = 69,
	NFS3ERR_STALE = 70,
	NFS3ERR_REMOTE = 71,
	NFS3ERR_BADHANDLE = 10001,
	NFS3ERR_NOT_SYNC = 10002,
	NFS3ERR_BAD_COOKIE = 10003,
	NFS3ERR_NOTSUPP = 10004,
	NFS3ERR_TOOSMALL = 10005,
	NFS3ERR_SERVERFAULT = 10006,
	NFS3ERR_BADTYPE = 10007,
	NFS3ERR_JUKEBOX = 10008
};
typedef enum nfsstat3 nfsstat3;
RPC_EXTERN bool_t xdr_nfsstat3(XDR *, nfsstat3 *);

enum ftype3 {
	NF3REG = 1,
	NF3DIR = 2,
	NF3BLK = 3,
	NF3CHR = 4,
	NF3LNK = 5,
	NF3SOCK = 6,
	NF3FIFO = 7
};
typedef enum ftype3 ftype3;
RPC_EXTERN bool_t xdr_ftype3(XDR *, ftype3 *);

typedef struct specdata3 {
	uint32 major;
	uint32 minor;
} specdata3;
RPC_EXTERN bool_t xdr_specdata3(XDR *, specdata3 *);
RPC_CONSTRUCT (Specdata3, specdata3)

typedef struct nfs_fh3 {
	struct {
		u_int len;
		char *val;
	} data;
} nfs_fh3;
RPC_EXTERN bool_t xdr_nfs_fh3(XDR *, nfs_fh3 *);
RPC_CONSTRUCT (Nfs_fh3, nfs_fh3)

typedef struct nfstime3 {
	uint32 seconds;
	uint32 nseconds;
} nfstime3;
RPC_EXTERN bool_t xdr_nfstime3(XDR *, nfstime3 *);
RPC_CONSTRUCT (Nfstime3, nfstime3)

typedef struct fattr3 {
	ftype3 type;
	uint32 mode;
	uint32 nlink;
	uint32 uid;
	uint32 gid;
	uint64 size;
	uint64 used;
	specdata3 rdev;
	uint64 fsid;
	uint64 fileid;
	nfstime3 atime;
	nfstime3 mtime;
	nfstime3 ctime;
} fattr3;
RPC_EXTERN bool_t xdr_fattr3(XDR *, fattr3 *);
RPC_CONSTRUCT (Fattr3, fattr3)

typedef struct post_op_attr {
	bool_t present;
	union {
		fattr3 attributes;
	} RPC_UNION_NAME(post_op_attr);
} post_op_attr;
RPC_EXTERN bool_t xdr_post_op_attr(XDR *, post_op_attr *);
RPC_CONSTRUCT (Post_op_attr, post_op_attr)

typedef struct wcc_attr {
	uint64 size;
	nfstime3 mtime;
	nfstime3 ctime;
} wcc_attr;
RPC_EXTERN bool_t xdr_wcc_attr(XDR *, wcc_attr *);
RPC_CONSTRUCT (Wcc_attr, wcc_attr)

typedef struct pre_op_attr {
	bool_t present;
	union {
		wcc_attr attributes;
	} RPC_UNION_NAME(pre_op_attr);
} pre_op_attr;
RPC_EXTERN bool_t xdr_pre_op_attr(XDR *, pre_op_attr *);
RPC_CONSTRUCT (Pre_op_attr, pre_op_attr)

typedef struct wcc_data {
	pre_op_attr before;
	post_op_attr after;
} wcc_data;
RPC_EXTERN bool_t xdr_wcc_data(XDR *, wcc_data *);
RPC_CONSTRUCT (Wcc_data, wcc_data)

typedef struct post_op_fh3 {
	bool_t present;
	union {
		nfs_fh3 handle;
	} RPC_UNION_NAME(post_op_fh3);
} post_op_fh3;
RPC_EXTERN bool_t xdr_post_op_fh3(XDR *, post_op_fh3 *);
RPC_CONSTRUCT (Post_op_fh3, post_op_fh3)

typedef struct set_uint32 {
	bool_t set;
	union {
		uint32 val;
	} RPC_UNION_NAME(set_uint32);
} set_uint32;
RPC_EXTERN bool_t xdr_set_uint32(XDR *, set_uint32 *);
RPC_CONSTRUCT (Set_uint32, set_uint32)

typedef struct set_uint64 {
	bool_t set;
	union {
		uint64 val;
	} RPC_UNION_NAME(set_uint64);
} set_uint64;
RPC_EXTERN bool_t xdr_set_uint64(XDR *, set_uint64 *);
RPC_CONSTRUCT (Set_uint64, set_uint64)

enum time_how {
	DONT_CHANGE = 0,
	SET_TO_SERVER_TIME = 1,
	SET_TO_CLIENT_TIME = 2
};
typedef enum time_how time_how;
RPC_EXTERN bool_t xdr_time_how(XDR *, time_how *);

typedef struct set_time {
	time_how set;
	union {
		nfstime3 time;
	} RPC_UNION_NAME(set_time);
} set_time;
RPC_EXTERN bool_t xdr_set_time(XDR *, set_time *);
RPC_CONSTRUCT (Set_time, set_time)

typedef struct sattr3 {
	set_uint32 mode;
	set_uint32 uid;
	set_uint32 gid;
	set_uint64 size;
	set_time atime;
	set_time mtime;
} sattr3;
RPC_EXTERN bool_t xdr_sattr3(XDR *, sattr3 *);
RPC_CONSTRUCT (Sattr3, sattr3)

typedef struct diropargs3 {
	nfs_fh3 dir;
	filename3 name;
} diropargs3;
RPC_EXTERN bool_t xdr_diropargs3(XDR *, diropargs3 *);
RPC_CONSTRUCT (Diropargs3, diropargs3)

typedef struct diropres3ok {
	post_op_fh3 obj;
	post_op_attr obj_attributes;
	wcc_data dir_wcc;
} diropres3ok;
RPC_EXTERN bool_t xdr_diropres3ok(XDR *, diropres3ok *);
RPC_CONSTRUCT (Diropres3ok, diropres3ok)

typedef struct diropres3 {
	nfsstat3 status;
	union {
		diropres3ok resok;
		wcc_data resfail;
	} RPC_UNION_NAME(diropres3);
} diropres3;
RPC_EXTERN bool_t xdr_diropres3(XDR *, diropres3 *);
RPC_CONSTRUCT (Diropres3, diropres3)

typedef struct wccstat3 {
	nfsstat3 status;
	union {
		wcc_data wcc;
	} RPC_UNION_NAME(wccstat3);
} wccstat3;
RPC_EXTERN bool_t xdr_wccstat3(XDR *, wccstat3 *);
RPC_CONSTRUCT (Wccstat3, wccstat3)

typedef struct getattr3res {
	nfsstat3 status;
	union {
		fattr3 attributes;
	} RPC_UNION_NAME(getattr3res);
} getattr3res;
RPC_EXTERN bool_t xdr_getattr3res(XDR *, getattr3res *);
RPC_CONSTRUCT (Getattr3res, getattr3res)

typedef struct sattrguard3 {
	bool_t check;
	union {
		nfstime3 ctime;
	} RPC_UNION_NAME(sattrguard3);
} sattrguard3;
RPC_EXTERN bool_t xdr_sattrguard3(XDR *, sattrguard3 *);
RPC_CONSTRUCT (Sattrguard3, sattrguard3)

typedef struct setattr3args {
	nfs_fh3 object;
	sattr3 new_attributes;
	sattrguard3 guard;
} setattr3args;
RPC_EXTERN bool_t xdr_setattr3args(XDR *, setattr3args *);
RPC_CONSTRUCT (Setattr3args, setattr3args)

typedef struct lookup3resok {
	nfs_fh3 object;
	post_op_attr obj_attributes;
	post_op_attr dir_attributes;
} lookup3resok;
RPC_EXTERN bool_t xdr_lookup3resok(XDR *, lookup3resok *);
RPC_CONSTRUCT (Lookup3resok, lookup3resok)

typedef struct lookup3res {
	nfsstat3 status;
	union {
		lookup3resok resok;
		post_op_attr resfail;
	} RPC_UNION_NAME(lookup3res);
} lookup3res;
RPC_EXTERN bool_t xdr_lookup3res(XDR *, lookup3res *);
RPC_CONSTRUCT (Lookup3res, lookup3res)
#define ACCESS3_READ 0x0001
#define ACCESS3_LOOKUP 0x0002
#define ACCESS3_MODIFY 0x0004
#define ACCESS3_EXTEND 0x0008
#define ACCESS3_DELETE 0x0010
#define ACCESS3_EXECUTE 0x0020

typedef struct access3args {
	nfs_fh3 object;
	uint32 access;
} access3args;
RPC_EXTERN bool_t xdr_access3args(XDR *, access3args *);
RPC_CONSTRUCT (Access3args, access3args)

typedef struct access3resok {
	post_op_attr obj_attributes;
	uint32 access;
} access3resok;
RPC_EXTERN bool_t xdr_access3resok(XDR *, access3resok *);
RPC_CONSTRUCT (Access3resok, access3resok)

typedef struct access3res {
	nfsstat3 status;
	union {
		access3resok resok;
		post_op_attr resfail;
	} RPC_UNION_NAME(access3res);
} access3res;
RPC_EXTERN bool_t xdr_access3res(XDR *, access3res *);
RPC_CONSTRUCT (Access3res, access3res)

typedef struct readlink3resok {
	post_op_attr symlink_attributes;
	nfspath3 data;
} readlink3resok;
RPC_EXTERN bool_t xdr_readlink3resok(XDR *, readlink3resok *);
RPC_CONSTRUCT (Readlink3resok, readlink3resok)

typedef struct readlink3res {
	nfsstat3 status;
	union {
		readlink3resok resok;
		post_op_attr resfail;
	} RPC_UNION_NAME(readlink3res);
} readlink3res;
RPC_EXTERN bool_t xdr_readlink3res(XDR *, readlink3res *);
RPC_CONSTRUCT (Readlink3res, readlink3res)

typedef struct read3args {
	nfs_fh3 file;
	uint64 offset;
	uint32 count;
} read3args;
RPC_EXTERN bool_t xdr_read3args(XDR *, read3args *);
RPC_CONSTRUCT (Read3args, read3args)

typedef struct read3resok {
	post_op_attr file_attributes;
	uint32 count;
	bool_t eof;
	struct {
		u_int len;
		char *val;
	} data;
} read3resok;
RPC_EXTERN bool_t xdr_read3resok(XDR *, read3resok *);
RPC_CONSTRUCT (Read3resok, read3resok)

typedef struct read3res {
	nfsstat3 status;
	union {
		read3resok resok;
		post_op_attr resfail;
	} RPC_UNION_NAME(read3res);
} read3res;
RPC_EXTERN bool_t xdr_read3res(XDR *, read3res *);
RPC_CONSTRUCT (Read3res, read3res)

enum stable_how {
	UNSTABLE = 0,
	DATA_SYNC = 1,
	FILE_SYNC = 2
};
typedef enum stable_how stable_how;
RPC_EXTERN bool_t xdr_stable_how(XDR *, stable_how *);

typedef struct write3args {
	nfs_fh3 file;
	uint64 offset;
	uint32 count;
	stable_how stable;
	struct {
		u_int len;
		char *val;
	} data;
} write3args;
RPC_EXTERN bool_t xdr_write3args(XDR *, write3args *);
RPC_CONSTRUCT (Write3args, write3args)

typedef struct write3resok {
	wcc_data file_wcc;
	uint32 count;
	stable_how committed;
	writeverf3 verf;
} write3resok;
RPC_EXTERN bool_t xdr_write3resok(XDR *, write3resok *);
RPC_CONSTRUCT (Write3resok, write3resok)

typedef struct write3res {
	nfsstat3 status;
	union {
		write3resok resok;
		wcc_data resfail;
	} RPC_UNION_NAME(write3res);
} write3res;
RPC_EXTERN bool_t xdr_write3res(XDR *, write3res *);
RPC_CONSTRUCT (Write3res, write3res)

enum createmode3 {
	UNCHECKED = 0,
	GUARDED = 1,
	EXCLUSIVE = 2
};
typedef enum createmode3 createmode3;
RPC_EXTERN bool_t xdr_createmode3(XDR *, createmode3 *);

typedef struct createhow3 {
	createmode3 mode;
	union {
		sattr3 obj_attributes;
		createverf3 verf;
	} RPC_UNION_NAME(createhow3);
} createhow3;
RPC_EXTERN bool_t xdr_createhow3(XDR *, createhow3 *);
RPC_CONSTRUCT (Createhow3, createhow3)

typedef struct create3args {
	diropargs3 where;
	createhow3 how;
} create3args;
RPC_EXTERN bool_t xdr_create3args(XDR *, create3args *);
RPC_CONSTRUCT (Create3args, create3args)

typedef struct mkdir3args {
	diropargs3 where;
	sattr3 attributes;
} mkdir3args;
RPC_EXTERN bool_t xdr_mkdir3args(XDR *, mkdir3args *);
RPC_CONSTRUCT (Mkdir3args, mkdir3args)

typedef struct symlinkdata3 {
	sattr3 symlink_attributes;
	nfspath3 symlink_data;
} symlinkdata3;
RPC_EXTERN bool_t xdr_symlinkdata3(XDR *, symlinkdata3 *);
RPC_CONSTRUCT (Symlinkdata3, symlinkdata3)

typedef struct symlink3args {
	diropargs3 where;
	symlinkdata3 symlink;
} symlink3args;
RPC_EXTERN bool_t xdr_symlink3args(XDR *, symlink3args *);
RPC_CONSTRUCT (Symlink3args, symlink3args)

typedef struct devicedata3 {
	sattr3 dev_attributes;
	specdata3 spec;
} devicedata3;
RPC_EXTERN bool_t xdr_devicedata3(XDR *, devicedata3 *);
RPC_CONSTRUCT (Devicedata3, devicedata3)

typedef struct mknoddata3 {
	ftype3 type;
	union {
		devicedata3 device;
		sattr3 pipe_attributes;
	} RPC_UNION_NAME(mknoddata3);
} mknoddata3;
RPC_EXTERN bool_t xdr_mknoddata3(XDR *, mknoddata3 *);
RPC_CONSTRUCT (Mknoddata3, mknoddata3)

typedef struct mknod3args {
	diropargs3 where;
	mknoddata3 what;
} mknod3args;
RPC_EXTERN bool_t xdr_mknod3args(XDR *, mknod3args *);
RPC_CONSTRUCT (Mknod3args, mknod3args)

typedef struct rename3args {
	diropargs3 from;
	diropargs3 to;
} rename3args;
RPC_EXTERN bool_t xdr_rename3args(XDR *, rename3args *);
RPC_CONSTRUCT (Rename3args, rename3args)

typedef struct rename3wcc {
	wcc_data fromdir_wcc;
	wcc_data todir_wcc;
} rename3wcc;
RPC_EXTERN bool_t xdr_rename3wcc(XDR *, rename3wcc *);
RPC_CONSTRUCT (Rename3wcc, rename3wcc)

typedef struct rename3res {
	nfsstat3 status;
	union {
		rename3wcc res;
	} RPC_UNION_NAME(rename3res);
} rename3res;
RPC_EXTERN bool_t xdr_rename3res(XDR *, rename3res *);
RPC_CONSTRUCT (Rename3res, rename3res)

typedef struct link3args {
	nfs_fh3 file;
	diropargs3 link;
} link3args;
RPC_EXTERN bool_t xdr_link3args(XDR *, link3args *);
RPC_CONSTRUCT (Link3args, link3args)

typedef struct link3wcc {
	post_op_attr file_attributes;
	wcc_data linkdir_wcc;
} link3wcc;
RPC_EXTERN bool_t xdr_link3wcc(XDR *, link3wcc *);
RPC_CONSTRUCT (Link3wcc, link3wcc)

typedef struct link3res {
	nfsstat3 status;
	union {
		link3wcc res;
	} RPC_UNION_NAME(link3res);
} link3res;
RPC_EXTERN bool_t xdr_link3res(XDR *, link3res *);
RPC_CONSTRUCT (Link3res, link3res)

typedef struct readdir3args {
	nfs_fh3 dir;
	uint64 cookie;
	cookieverf3 cookieverf;
	uint32 count;
} readdir3args;
RPC_EXTERN bool_t xdr_readdir3args(XDR *, readdir3args *);
RPC_CONSTRUCT (Readdir3args, readdir3args)

typedef struct entry3 {
	uint64 fileid;
	filename3 name;
	uint64 cookie;
	struct entry3 *nextentry;
} entry3;
RPC_EXTERN bool_t xdr_entry3(XDR *, entry3 *);
RPC_CONSTRUCT (Entry3, entry3)

typedef struct dirlist3 {
	entry3 *entries;
	bool_t eof;
} dirlist3;
RPC_EXTERN bool_t xdr_dirlist3(XDR *, dirlist3 *);
RPC_CONSTRUCT (Dirlist3, dirlist3)

typedef struct readdir3resok {
	post_op_attr dir_attributes;
	cookieverf3 cookieverf;
	dirlist3 reply;
} readdir3resok;
RPC_EXTERN bool_t xdr_readdir3resok(XDR *, readdir3resok *);
RPC_CONSTRUCT (Readdir3resok, readdir3resok)

typedef struct readdir3res {
	nfsstat3 status;
	union {
		readdir3resok resok;
		post_op_attr resfail;
	} RPC_UNION_NAME(readdir3res);
} readdir3res;
RPC_EXTERN bool_t xdr_readdir3res(XDR *, readdir3res *);
RPC_CONSTRUCT (Readdir3res, readdir3res)

typedef struct readdirplus3args {
	nfs_fh3 dir;
	uint64 cookie;
	cookieverf3 cookieverf;
	uint32 dircount;
	uint32 maxcount;
} readdirplus3args;
RPC_EXTERN bool_t xdr_readdirplus3args(XDR *, readdirplus3args *);
RPC_CONSTRUCT (Readdirplus3args, readdirplus3args)

typedef struct entryplus3 {
	uint64 fileid;
	filename3 name;
	uint64 cookie;
	post_op_attr name_attributes;
	post_op_fh3 name_handle;
	struct entryplus3 *nextentry;
} entryplus3;
RPC_EXTERN bool_t xdr_entryplus3(XDR *, entryplus3 *);
RPC_CONSTRUCT (Entryplus3, entryplus3)

typedef struct dirlistplus3 {
	entryplus3 *entries;
	bool_t eof;
} dirlistplus3;
RPC_EXTERN bool_t xdr_dirlistplus3(XDR *, dirlistplus3 *);
RPC_CONSTRUCT (Dirlistplus3, dirlistplus3)

typedef struct readdirplus3resok {
	post_op_attr dir_attributes;
	cookieverf3 cookieverf;
	dirlistplus3 reply;
} readdirplus3resok;
RPC_EXTERN bool_t xdr_readdirplus3resok(XDR *, readdirplus3resok *);
RPC_CONSTRUCT (Readdirplus3resok, readdirplus3resok)

typedef struct readdirplus3res {
	nfsstat3 status;
	union {
		readdirplus3resok resok;
		post_op_attr resfail;
	} RPC_UNION_NAME(readdirplus3res);
} readdirplus3res;
RPC_EXTERN bool_t xdr_readdirplus3res(XDR *, readdirplus3res *);
RPC_CONSTRUCT (Readdirplus3res, readdirplus3res)

typedef struct fsstat3resok {
	post_op_attr obj_attributes;
	uint64 tbytes;
	uint64 fbytes;
	uint64 abytes;
	uint64 tfiles;
	uint64 ffiles;
	uint64 afiles;
	uint32 invarsec;
} fsstat3resok;
RPC_EXTERN bool_t xdr_fsstat3resok(XDR *, fsstat3resok *);
RPC_CONSTRUCT (Fsstat3resok, fsstat3resok)

typedef struct fsstat3res {
	nfsstat3 status;
	union {
		fsstat3resok resok;
		post_op_attr resfail;
	} RPC_UNION_NAME(fsstat3res);
} fsstat3res;
RPC_EXTERN bool_t xdr_fsstat3res(XDR *, fsstat3res *);
RPC_CONSTRUCT (Fsstat3res, fsstat3res)
#define FSF3_LINK 0x0001
#define FSF3_SYMLINK 0x0002
#define FSF3_HOMOGENEOUS 0x0008
#define FSF3_CANSETTIME 0x0010

typedef struct fsinfo3resok {
	post_op_attr obj_attributes;
	uint32 rtmax;
	uint32 rtpref;
	uint32 rtmult;
	uint32 wtmax;
	uint32 wtpref;
	uint32 wtmult;
	uint32 dtpref;
	uint64 maxfilesize;
	nfstime3 time_delta;
	uint32 properties;
} fsinfo3resok;
RPC_EXTERN bool_t xdr_fsinfo3resok(XDR *, fsinfo3resok *);
RPC_CONSTRUCT (Fsinfo3resok, fsinfo3resok)

typedef struct fsinfo3res {
	nfsstat3 status;
	union {
		fsinfo3resok resok;
		post_op_attr resfail;
	} RPC_UNION_NAME(fsinfo3res);
} fsinfo3res;
RPC_EXTERN bool_t xdr_fsinfo3res(XDR *, fsinfo3res *);
RPC_CONSTRUCT (Fsinfo3res, fsinfo3res)

typedef struct pathconf3resok {
	post_op_attr obj_attributes;
	uint32 linkmax;
	uint32 name_max;
	bool_t no_trunc;
	bool_t chown_restricted;
	bool_t case_insensitive;
	bool_t case_preserving;
} pathconf3resok;
RPC_EXTERN bool_t xdr_pathconf3resok(XDR *, pathconf3resok *);
RPC_CONSTRUCT (Pathconf3resok, pathconf3resok)

typedef struct pathconf3res {
	nfsstat3 status;
	union {
		pathconf3resok resok;
		post_op_attr resfail;
	} RPC_UNION_NAME(pathconf3res);
} pathconf3res;
RPC_EXTERN bool_t xdr_pathconf3res(XDR *, pathconf3res *);
RPC_CONSTRUCT (Pathconf3res, pathconf3res)

typedef struct commit3args {
	nfs_fh3 file;
	uint64 offset;
	uint32 count;
} commit3args;
RPC_EXTERN bool_t xdr_commit3args(XDR *, commit3args *);
RPC_CONSTRUCT (Commit3args, commit3args)

typedef struct commit3resok {
	wcc_data file_wcc;
	writeverf3 verf;
} commit3resok;
RPC_EXTERN bool_t xdr_commit3resok(XDR *, commit3resok *);
RPC_CONSTRUCT (Commit3resok, commit3resok)

typedef struct commit3res {
	nfsstat3 status;
	union {
		commit3resok resok;
		wcc_data resfail;
	} RPC_UNION_NAME(commit3res);
} commit3res;
RPC_EXTERN bool_t xdr_commit3res(XDR *, commit3res *);
RPC_CONSTRUCT (Commit3res, commit3res)

#define NFS_PROGRAM ((u_long)100003)
RPC_EXTERN const struct rpcgen_table nfs_program_3_table[];
RPC_EXTERN const int nfs_program_3_nproc;
RPC_EXTERN const struct rpc_program  nfs_program_3;
#define NFS_V3 ((u_long)3)
#define NFSPROC3_NULL ((u_long)0)
#define NFSPROC3_GETATTR ((u_long)1)
#define NFSPROC3_SETATTR ((u_long)2)
#define NFSPROC3_LOOKUP ((u_long)3)
#define NFSPROC3_ACCESS ((u_long)4)
#define NFSPROC3_READLINK ((u_long)5)
#define NFSPROC3_READ ((u_long)6)
#define NFSPROC3_WRITE ((u_long)7)
#define NFSPROC3_CREATE ((u_long)8)
#define NFSPROC3_MKDIR ((u_long)9)
#define NFSPROC3_SYMLINK ((u_long)10)
#define NFSPROC3_MKNOD ((u_long)11)
#define NFSPROC3_REMOVE ((u_long)12)
#define NFSPROC3_RMDIR ((u_long)13)
#define NFSPROC3_RENAME ((u_long)14)
#define NFSPROC3_LINK ((u_long)15)
#define NFSPROC3_READDIR ((u_long)16)
#define NFSPROC3_READDIRPLUS ((u_long)17)
#define NFSPROC3_FSSTAT ((u_long)18)
#define NFSPROC3_FSINFO ((u_long)19)
#define NFSPROC3_PATHCONF ((u_long)20)
#define NFSPROC3_COMMIT ((u_long)21)


#endif /* !_NFS3_PROT_H_RPCGEN */
